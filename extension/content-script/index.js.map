{"version":3,"file":"index.js","sources":["../../utils/dist/messaging/addListener.js","../../content-script/src/chrome.runtime/onMessage/index.ts","../../content-script/src/chrome.runtime/onMessage/handlers.ts","../../content-script/src/chrome.runtime/onMessage/alert.ts","../../utils/dist/messaging/RuntimeMessage.js"],"sourcesContent":["import { isRecipient, } from './RuntimeMessage';\nexport const addListener = (to, requestHandlers, responseHandlers) => chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n    // console.warn(to, message, sender);\n    if (!isRecipient(message, to))\n        return false;\n    const { type } = message;\n    const response = message;\n    if (response.isReply) {\n        const handleResponse = responseHandlers[type];\n        if (handleResponse) {\n            handleResponse(response, sender);\n        }\n        else {\n            console.error(`[${to}] No handler for response message ${type}`);\n        }\n        return false;\n    }\n    const handleRequest = requestHandlers[type];\n    if (handleRequest) {\n        return handleRequest(message, sender, sendResponse);\n    }\n    console.error(`[${to}] No handler for request message ${type}`);\n    return false;\n});\n//# sourceMappingURL=addListener.js.map","import { addListener } from 'utils';\nimport { requestHandlers, responseHandlers } from './handlers';\n\naddListener('content', requestHandlers, responseHandlers);\n","import type { RequestHandler, ResponseHandler } from 'utils';\n\nimport { alert } from './alert';\n\nexport const requestHandlers: { [key: string]: RequestHandler } = {\n  alert,\n};\nexport const responseHandlers: { [key: string]: ResponseHandler } = {};\n","import type { RequestHandler } from 'utils';\n\nexport const alert: RequestHandler = ({ body }) => {\n  // eslint-disable-next-line no-alert\n  window.alert(body);\n  return false;\n};\n","/**\n * Tells whether the address is a recipient of the message.\n * @param param0 The message.\n * @param address The address to check.\n * @returns True if the address is a recipient of the message.\n */\nexport const isRecipient = ({ to }, address) => {\n    if (Array.isArray(to)) {\n        return to.length === 0 || to.includes(address);\n    }\n    return to === address;\n};\n//# sourceMappingURL=RuntimeMessage.js.map"],"names":["to","requestHandlers","responseHandlers","alert","_ref","window","body","chrome","runtime","onMessage","addListener","message","sender","sendResponse","address","Array","isArray","length","includes","isRecipient","type","isReply","handleResponse","console","error","handleRequest"],"mappings":"AAQ2B,IACzBA,EACAC,EACAC,EAFAF,ECNU,UDOVC,EENgE,CAChEE,MCHmC,SAAAC,GAGnC,OADAC,OAAOF,MAFyCC,EAAVE,WHStCJ,EEJkE,GFMlEK,OAAOC,QAAQC,UAAUC,YACvB,SAACC,EAASC,EAAQC,GAEhB,IIiCqB,SAAAT,EAEzBU,GACW,IAAAd,EAAAI,EAFTJ,GAGF,OAAIe,MAAMC,QAAQhB,GACK,IAAZA,EAACiB,QAAgBjB,EAAGkB,SAASJ,GAE/Bd,IAAKc,EJxCLK,CAAYR,EAASX,GAAK,OAAA,EAE/B,IAAAoB,EAAiBT,EAATS,KAER,GADiBT,EACJU,QAAS,CACpB,IAAMC,EAAiBpB,EAAiBkB,GAMxC,OALIE,EACFA,EAJaX,EAIYC,GAEzBW,QAAQC,MAAUxB,IAAAA,EAAuCoB,qCAAAA,IAEpD,EAGT,IAAMK,EAAgBxB,EAAgBmB,GACtC,OAAIK,EACKA,EAAcd,EAA2BC,EAAQC,IAG1DU,QAAQC,MAAUxB,IAAAA,EAAsCoB,oCAAAA,IAEzD"}